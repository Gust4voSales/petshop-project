import { getCoreRowModel, useReactTable, flexRender, ColumnDef } from "@tanstack/react-table";
import { EmptyContent } from "./EmptyContent";
import { ScrollArea } from "./ScrollArea";
import { AsynchronousContent } from "@components/AsynchronousContent";
import { QueryStatus } from "@tanstack/react-query";

interface Props<T> {
  data: T[];
  columns: ColumnDef<T, any>[];
  asyncStatus?: QueryStatus;
  idPath?: string;
}

export function Table<T>({ data, columns, asyncStatus = "success", idPath }: Props<T>) {
  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getRowId(originalRow: any) {
      // For better consistency, use the unique ID from the data and not the one generated by ReactTable.
      // Sometimes this ID property has a different name (e.g. 'user_id') or it's in a nested object, like user_data: {id: '...'}
      // In these cases, just pass the prop idPath, with the path to the desired ID.
      if (!idPath) {
        if (originalRow.id) return originalRow.id;
        throw new Error(`All rows from data needs an unique 'id'`);
      }

      const properties = idPath.split(".");
      let currentObj = { ...originalRow };

      for (const property of properties) {
        currentObj = currentObj[property];
      }

      if (currentObj) return currentObj;

      throw new Error(`All rows from data needs an unique 'id'`);
    },
  });

  const hasItems = data.length > 0;

  return (
    <AsynchronousContent status={asyncStatus}>
      <ScrollArea>
        <div className="max-h-screen-2/3">
          <table className="table">
            {hasItems && (
              <thead>
                {table.getHeaderGroups().map((headerGroup) => (
                  <tr key={headerGroup.id}>
                    {headerGroup.headers.map((header) => (
                      <th key={header.id}>
                        {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}
                      </th>
                    ))}
                  </tr>
                ))}
              </thead>
            )}
            <tbody>
              {table.getRowModel().rows.map((row) => (
                <tr key={row.id}>
                  {row.getVisibleCells().map((cell) => (
                    <td key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</td>
                  ))}
                </tr>
              ))}

              {!hasItems && (
                <tr>
                  <td>
                    <EmptyContent />
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </ScrollArea>
    </AsynchronousContent>
  );
}
